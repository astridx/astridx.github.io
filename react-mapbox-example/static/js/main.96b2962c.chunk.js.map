{"version":3,"sources":["api/fetchFakeData.js","components/Popup.js","App.js","serviceWorker.js","index.js"],"names":["getRandomCoordinate","centerLon","longitude","centerLat","latitude","r","Math","sqrt","random","theta","PI","cos","sin","fetchFakeData","centerCoordinates","newFeaturesList","i","id","push","type","geometry","coordinates","properties","name","description","Promise","resolve","features","Popup","feature","mapboxgl","accessToken","process","App","mapContainerRef","useRef","popUpRef","offset","useEffect","map","Map","container","current","style","center","zoom","addControl","NavigationControl","on","addSource","data","addLayer","source","layout","a","getCenter","lng","lat","results","getSource","setData","e","length","getCanvas","cursor","popupNode","document","createElement","ReactDOM","render","setLngLat","setDOMContent","addTo","remove","className","ref","Boolean","window","location","hostname","match","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.96b2962c.chunk.js","sourcesContent":["/**\n * A complete Coordinate Pair consisting of a latitude and longitude\n * @typedef {Object} CoordinatePair\n * @property {number} longitude - longitude coordinate\n * @property {number} latitude - latitude coordinate\n */\n\n/**\n * Generates a GeoJSON FeatureCollection of random points based on\n * the center coordinates passed in.\n * @param {CoordinatePair} centerCoordinates - the {@link CoordinatePair} for the map center\n * @return {results} GeoJSON FeatureCollection\n */\nconst fetchFakeData = centerCoordinates => {\n  const newFeaturesList = [];\n  for (let i = 0; i < 20; i++) {\n    const id = i;\n    const { longitude, latitude } = getRandomCoordinate(centerCoordinates);\n    newFeaturesList.push({\n      type: \"Feature\",\n      geometry: {\n        type: \"Point\",\n        coordinates: [longitude, latitude]\n      },\n      properties: {\n        id,\n        name: `Random Point #${id}`,\n        description: `description for Random Point #${id}`\n      }\n    });\n  }\n\n  return Promise.resolve({\n    type: \"FeatureCollection\",\n    features: newFeaturesList\n  });\n};\n\n/**\n * Generates a random point within 0.025 radius of map center coordinates.\n * @param {CoordinatePair} centerCoordinates - the {@link CoordinatePair} for the map center\n * @return {CoordinatePair} randomly generated coordinate pair\n */\nconst getRandomCoordinate = ({ longitude: centerLon, latitude: centerLat }) => {\n  const r = 0.025 * Math.sqrt(Math.random());\n  const theta = Math.random() * 2 * Math.PI;\n  const latitude = centerLat + r * Math.cos(theta);\n  const longitude = centerLon + r * Math.sin(theta);\n  return { longitude, latitude };\n};\n\nexport default fetchFakeData;\n","import React from \"react\";\n\nconst Popup = ({ feature }) => {\n  const { id, name, description } = feature.properties;\n\n  return (\n    <div id={`popup-${id}`}>\n      <h3>{name}</h3>\n      {description}\n    </div>\n  );\n};\n\nexport default Popup;\n","import ReactDOM from \"react-dom\";\nimport React, { useRef, useEffect } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\n\nimport fetchFakeData from \"./api/fetchFakeData\";\nimport Popup from \"./components/Popup\";\nimport \"./App.css\";\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\n\nconst App = () => {\n  const mapContainerRef = useRef(null);\n  const popUpRef = useRef(new mapboxgl.Popup({ offset: 15 }));\n\n  // initialize map when component mounts\n  useEffect(() => {\n    const map = new mapboxgl.Map({\n      container: mapContainerRef.current,\n      // See style options here: https://docs.mapbox.com/api/maps/#styles\n      style: \"mapbox://styles/mapbox/streets-v11\",\n      center: [7.2, 50.3],\n      zoom: 11.5\n    });\n\n    // add navigation control (zoom buttons)\n    map.addControl(new mapboxgl.NavigationControl(), \"bottom-right\");\n\n    map.on(\"load\", () => {\n      // Füge die Datenquelle für eine neue Feature-Sammlung ohne Features hinzu\n      map.addSource(\"random-points-data\", {\n        type: \"geojson\",\n        data: {\n          type: \"FeatureCollection\",\n          features: []\n        }\n      });\n      // Füge nun die Ebene hinzu und verweise auf die oben genannte Datenquelle mit Namen\n      map.addLayer({\n        id: \"random-points-layer\",\n        source: \"random-points-data\",\n        type: \"symbol\",\n        layout: {\n          // https://labs.mapbox.com/maki-icons\n          \"icon-image\": \"marker-15\",\n          \"icon-padding\": 1,\n          \"icon-allow-overlap\": true\n        }\n      });\n    });\n\n    map.on(\"moveend\", async () => {\n      // neue Mittenkoordinaten erhalten\n      const { lng, lat } = map.getCenter();\n      // neue Daten abrufen\n      const results = await fetchFakeData({ longitude: lng, latitude: lat });\n      // Aktualisiere die Quelle \"Random-Points-Data\" mit neuen Daten\n      // Alle Ebenen, die die Datenquelle \"Random-Points-Data\" verwenden, \n      // werden automatisch aktualisiert\n      map.getSource(\"random-points-data\").setData(results);\n    });\n\n    // Ändere den Cursor in einen Zeiger, wenn der Benutzer mit der Maus über eine anklickbare Funktion fährt\n    map.on(\"mouseenter\", \"random-points-layer\", e => {\n      if (e.features.length) {\n        map.getCanvas().style.cursor = \"pointer\";\n      }\n    });\n\n    // Setze den Cursor auf die Standardeinstellung zurück, wenn sich der Benutzer nicht mehr über einer anklickbaren Funktion befindet\n    map.on(\"mouseleave\", \"random-points-layer\", () => {\n      map.getCanvas().style.cursor = \"\";\n    });\n\n    // Popup hinzufügen, wenn Benutzer auf einen Punkt klickt\n    map.on(\"click\", \"random-points-layer\", e => {\n      if (e.features.length) {\n        const feature = e.features[0];\n        // Popup-Knoten erstellen\n        const popupNode = document.createElement(\"div\");\n        ReactDOM.render(<Popup feature={feature} />, popupNode);\n        // Popup-Knoten hinzufügen\n        popUpRef.current\n          .setLngLat(feature.geometry.coordinates)\n          .setDOMContent(popupNode)\n          .addTo(map);\n      }\n    });\n\n    // Aufräumen\n    return () => map.remove();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return <div className=\"map-container\" ref={mapContainerRef} />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}