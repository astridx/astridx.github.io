{"version":3,"sources":["components/Legend.js","components/Optionsfield.js","redux/reducer.js","redux/store.js","constants.js","redux/action-creators.js","Map.js","App.js","index.js"],"names":["Legend","props","className","active","name","description","stops","map","stop","i","key","style","backgroundColor","toLocaleString","Optionsfield","options","option","onChange","changeState","checked","property","type","initialState","data","store","createStore","state","action","Object","assign","setActiveOption","dispatch","ConnectedLegend","connect","ConnectedOptionsfield","Map","mapContainerRef","useRef","useState","setMap","useEffect","maplibregl","container","current","center","zoom","on","addSource","setLayoutProperty","addLayer","id","source","setPaintProperty","remove","paint","ref","ConnectedMap","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d0582fb.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Legend = (props) => {\n  const renderLegendKeys = (stop, i) => {\n    return (\n      <div key={i} className=\"txt-s\">\n        <span\n          className=\"mr6 round-full w12 h12 inline-block align-middle\"\n          style={{ backgroundColor: stop[1] }}\n        />\n        <span>{`${stop[0].toLocaleString()}`}</span>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div className=\"bg-white absolute bottom right mr12 mb24 py12 px12 shadow-darken10 round z1 wmax180\">\n        <div className=\"mb6\">\n          <h2 className=\"txt-bold txt-s block\">{props.active.name}</h2>\n          <p className=\"txt-s color-gray\">{props.active.description}</p>\n        </div>\n        {props.active.stops.map(renderLegendKeys)}\n      </div>\n    </>\n  );\n};\n\nexport default Legend;\n","import React from \"react\";\n\nconst Optionsfield = (props) => {\n  const renderOptions = (option, i) => {\n    return (\n      <label key={i} className=\"toggle-container\">\n        <input\n          onChange={() => props.changeState(option)}\n          checked={option.property === props.active.property}\n          name=\"toggle\"\n          type=\"radio\"\n        />\n        <div className=\"toggle txt-s py3 toggle--active-white\">\n          {option.name}\n        </div>\n      </label>\n    );\n  };\n  return (\n    <div className=\"toggle-group absolute top left ml12 mt12 border border--2 border--white bg-white shadow-darken10 z1\">\n      {props.options.map(renderOptions)}\n    </div>\n  );\n};\n\nexport default Optionsfield;\n","import * as Constants from '../constants'\nimport data from '../data.json'\n\nconst options = [{\n  name: 'Population',\n  description: 'Estimated total population',\n  property: 'pop_est',\n  stops: [\n    [0, '#f8d5cc'],\n    [1000000, '#f4bfb6'],\n    [5000000, '#f1a8a5'],\n    [10000000, '#ee8f9a'],\n    [50000000, '#ec739b'],\n    [100000000, '#dd5ca8'],\n    [250000000, '#c44cc0'],\n    [500000000, '#9f43d7'],\n    [1000000000, '#6e40e6']\n  ]\n}, {\n  name: 'GDP',\n  description: 'Estimate total GDP in millions of dollars',\n  property: 'gdp_md_est',\n  stops: [\n    [0, '#f8d5cc'],\n    [1000, '#f4bfb6'],\n    [5000, '#f1a8a5'],\n    [10000, '#ee8f9a'],\n    [50000, '#ec739b'],\n    [100000, '#dd5ca8'],\n    [250000, '#c44cc0'],\n    [5000000, '#9f43d7'],\n    [10000000, '#6e40e6']\n  ]\n}]\n\nconst initialState: State = {\n  data,\n  options,\n  active: options[0]\n};\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case Constants.SET_ACTIVE_OPTION:\n      return Object.assign({}, state, {\n        active: action.option\n      });\n    default:\n      return state;\n  }\n}\n\nexport { reducer, initialState };\n","import { createStore } from 'redux'\nimport { reducer } from './reducer'\n\nconst store = createStore(reducer);\n\nexport { store };\n","export const SET_ACTIVE_OPTION = 'SET_ACTIVE_OPTION';\n","import { store } from './store'\nimport * as Constants from '../constants'\n\nexport function setActiveOption(option) {\n  store.dispatch({\n    type: Constants.SET_ACTIVE_OPTION,\n    option\n  });\n}\n","import React, { useRef, useEffect, useState } from 'react';\nimport maplibregl from 'maplibre-gl';\nimport \"maplibre-gl/dist/maplibre-gl.css\"\nimport Legend from './components/Legend';\nimport Optionsfield from './components/Optionsfield';\nimport './Map.css';\nimport { setActiveOption } from './redux/action-creators';\nimport { connect } from 'react-redux';\n\nconst ConnectedLegend = connect(mapStateToPropsLegend)(Legend);\nconst ConnectedOptionsfield = connect(mapStateToPropsOptionsfield)(\n  Optionsfield\n);\n\nfunction mapStateToPropsLegend(state) {\n  return {\n    active: state.active\n  };\n}\n\nfunction mapStateToPropsOptionsfield(state) {\n  return {\n    options: state.options,\n    active: state.active\n  };\n}\n\nconst Map = props => {\n  const mapContainerRef = useRef(null);\n  const [map, setMap] = useState(null);\n\n  // Initialize map when component mounts\n  useEffect(() => {\n    const map = new maplibregl.Map({\n      container: mapContainerRef.current,\n      style: 'https://demotiles.maplibre.org/style.json',\n      center: [5, 34],\n      zoom: 1.5\n    });\n\n    map.on('load', () => {\n      map.addSource('countries', {\n        type: 'geojson',\n        data: props.data\n      });\n\n      map.setLayoutProperty('countries-label', 'text-field', [\n        'format',\n        ['get', 'name_en'],\n        { 'font-scale': 1.2 },\n        '\\n',\n        {},\n        ['get', 'name'],\n        {\n          'font-scale': 0.8,\n          'text-font': [\n            'literal',\n            ['DIN Offc Pro Italic', 'Arial Unicode MS Regular']\n          ]\n        }\n      ]);\n\n      map.addLayer(\n        {\n          id: 'countries',\n          type: 'fill',\n          source: 'countries'\n        },\n        'countries-label'\n      );\n\n      map.setPaintProperty('countries', 'fill-color', {\n        property: props.active.property,\n        stops: props.active.stops\n      });\n\n      setMap(map);\n    });\n\n    // Clean up on unmount\n    return () => map.remove();\n  }, []);\n\n  useEffect(() => {\n    paint();\n  }, [props.active]);\n\n  const paint = () => {\n    if (map) {\n      map.setPaintProperty('countries', 'fill-color', {\n        property: props.active.property,\n        stops: props.active.stops\n      });\n    }\n  };\n\n  return (\n    <div>\n      <div ref={mapContainerRef} className='map-container' />\n      <ConnectedLegend />\n      <ConnectedOptionsfield changeState={setActiveOption} />\n    </div>\n  );\n};\n\nexport default Map;\n","import React from 'react';\nimport Map from './Map';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\nimport { connect } from 'react-redux';\n\nconst ConnectedMap = connect(mapStateToProps)(Map);\n\nfunction mapStateToProps(state) {\n  return {\n    data: state.data,\n    active: state.active\n  };\n}\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div>\n        <ConnectedMap />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}